/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.4).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.url.shortener.api.controller;

import java.util.Optional;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.url.shortener.api.model.ShorenerResponse;
import com.url.shortener.api.model.Shortner;
import com.url.shortener.api.model.UrlHitsResponse;
import com.url.shortener.api.model.UrlsResponse;

import io.swagger.annotations.*;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-07-05T11:01:55.190+05:30[Asia/Calcutta]")
@Api(value = "urls", description = "the urls API")
public interface UrlsApi {

    Logger log = LoggerFactory.getLogger(UrlsApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Creates and returns a new entity", nickname = "addUrl", notes = "", response = UrlsResponse.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = UrlsResponse.class),
        @ApiResponse(code = 403, message = "No permission") })
    @RequestMapping(value = "/urls",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ShorenerResponse> addUrl(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Shortner body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UrlsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Returns a meta data of url", nickname = "getUrl", notes = "getRecord by tiny url.", response = Shortner.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Operation Completed Successfully", response = Shortner.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "No permission"),
        @ApiResponse(code = 404, message = "Ballot not found") })
    @RequestMapping(value = "/urls/{tinyUrlKey}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Shortner> getUrlByKey(@ApiParam(value = "Unique url of key",required=true) @PathVariable("tinyUrlKey") String tinyUrlKey) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        	
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UrlsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Returns a list of counts on particular hits", nickname = "getUrlHits", notes = "getListOfHits by tiny url.", response = UrlHitsResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Operation Completed Successfully", response = UrlHitsResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "No permission"),
        @ApiResponse(code = 404, message = "Ballot not found") })
    @RequestMapping(value = "/urls/{tinyUrlKey}/hits",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<UrlHitsResponse> getUrlHits(@ApiParam(value = "Unique url of key",required=true) @PathVariable("tinyUrlKey") String tinyUrlKey,@ApiParam(value = "filter for items starting on or after the start date.  Default is today - 3 days") @Valid @RequestParam(value = "startDate", required = false) String startDate,@ApiParam(value = "filter for ending before or on the end date. Default is today") @Valid @RequestParam(value = "endDate", required = false) String endDate) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UrlsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Returns a list of ballots", nickname = "getUrls", notes = "Gets an array of ballots ordered by start date in decending order.", response = UrlsResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Operation Completed Successfully", response = UrlsResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "No permission"),
        @ApiResponse(code = 404, message = "Ballot not found") })
    @RequestMapping(value = "/urls",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<UrlsResponse> getUrls(@Min(1) @Max(200) @ApiParam(value = "Indicates the maximum number of data to return in a single response", allowableValues = "") @Valid @RequestParam(value = "limit", required = false) Integer limit,@ApiParam(value = "Gives the number of data to be skipped") @Valid @RequestParam(value = "offset", required = false) Integer offset,@ApiParam(value = "Allows the user to reverse the default direction of the sort", allowableValues = "asc, desc") @Valid @RequestParam(value = "sortDir", required = false) String sortDir,@ApiParam(value = "the sorting fields , default by date") @Valid @RequestParam(value = "sortField", required = false) String sortField) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UrlsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

//
//    @ApiOperation(value = "Update number of hits on url", nickname = "updateHits", notes = "", response = Shortner.class, tags={  })
//    @ApiResponses(value = { 
//        @ApiResponse(code = 201, message = "Created", response = Shortner.class),
//        @ApiResponse(code = 403, message = "No permission") })
//    @RequestMapping(value = "/urls/{tinyUrlKey}",
//        produces = { "application/json" }, 
//        consumes = { "application/json" },
//        method = RequestMethod.PATCH)
//    default ResponseEntity<Shortner> updateHits(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Shortner body,@ApiParam(value = "Unique url of key",required=true) @PathVariable("tinyUrlKey") String tinyUrlKey) {
//        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
//        } else {
//            log.warn("ObjectMapper or HttpServletRequest not configured in default UrlsApi interface so no example is generated");
//        }
//        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
//    }

}
